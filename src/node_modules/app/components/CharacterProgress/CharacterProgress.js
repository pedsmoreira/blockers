// @flow

import React from "react";
import {Circle as ProgressBar} from "react-progressbar.js";

import {MAX_LEVEL} from "app/constants/properties";
import * as formulas from "app/constants/formulas";

import "./CharacterProgress.scss";

const animationDuration = 1000;

export default class ProgressMenu extends React.PureComponent {
    state: {
        cycleStatus: string,
        lastProgress: number,
        progress: number
    };

    props: {
        experience: number,
        level: number
    };

    constructor(props: any) {
        super(props);

        this.state = {
            cycleStatus: 'normal',
            lastProgress: 0,
            progress: 0
        };
    }

    componentWillReceiveProps(nextProps: any) {
        let cycleStatus = this.state.cycleStatus;
        if (cycleStatus !== 'normal') return;

        let progress = this.constructor.progress(nextProps);
        let lastProgress = this.state.progress;
        if (progress < lastProgress || nextProps.level > this.props.level) {
            progress = 1;
            cycleStatus = 'completing';
            lastProgress = 0;
        }

        this.setState({...this.state, progress, cycleStatus, lastProgress});
    }

    shouldComponentUpdate(_: any, nextState: any): boolean {
        return this.state !== nextState;
    }

    componentDidUpdate() {
        switch (this.state.cycleStatus) {
            case 'completing':
                setTimeout(() => {
                    this.setState({
                        ...this.state,
                        progress: 0,
                        cycleStatus: 'reseting'
                    });
                }, animationDuration);
                break;
            case 'reseting':
                setTimeout(() => {
                    this.setState({
                        ...this.state,
                        progress: this.constructor.progress(this.props),
                        cycleStatus: 'normal'
                    });
                }, animationDuration);
                break;
            default:
        }
    }

    render() {
        const strokeWidth = window.innerWidth <= 767 ? 8 : 4;

        return (
            <div className={`CharacterProgress CharacterProgress--${this.state.cycleStatus}`}>
                <ProgressBar progress={this.state.progress}
                             containerStyle={{width: '100%'}} containerClass="CharacterMenu-progress"
                             options={{duration: animationDuration, strokeWidth: strokeWidth, color: '#6C6'}}/>
            </div>
        )
    }

    static progress({level, experience}): number {
        if (level === MAX_LEVEL) return 1;

        const currentLevelExperience = formulas.levelExperience(level);
        const nextLevelExperience = formulas.levelExperience(level + 1);

        return (experience - currentLevelExperience) / (nextLevelExperience - currentLevelExperience);
    }
}
