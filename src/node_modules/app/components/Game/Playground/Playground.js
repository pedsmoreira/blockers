import {observer} from "mobx-react";
import React from "react";

import Matrix from "app/game/Matrix";
import type {Position} from "app/game/Matrix";
import Piece from "app/game/Piece";

import PlaygroundGrid from "app/components/Game/PlaygroundGrid/PlaygroundGrid";
import Block from "app/components/Game/Block/Block";

import "./Playground.scss";

const blockSize = 32;

@observer
export default class Playground extends React.PureComponent {
    _lastPiecePosition: Position = {};

    props: {
        matrix: Matrix,
        piece: Piece,
        piecePosition: Position
    };

    blocks(matrix: Matrix, position = {x: 0, y: 0}, type = null) {
        return matrix.mapValue((block, x, y) => {
            return (
                <Block key={`${block.id}${type ? `-${type}` : ''}`}
                       x={position.x + x} y={position.y + y}
                       block={block} blockSize={blockSize}
                       type={type}
                />
            )
        });
    }

    render() {
        const rows = this.props.matrix.rows();
        const cols = this.props.matrix.cols();
        const previewPosition = this.props.matrix.landingGridPosition(this.props.piece.grid, this.props.piecePosition);

        const blocks = this.blocks(this.props.piece, previewPosition, 'ghost')
            .concat(this.blocks(this.props.piece, this.props.piecePosition))
            .concat(this.blocks(this.props.matrix));

        return (
            <div className="playground" style={{width: `${cols * blockSize}px`, height: `${rows * blockSize}px`}}>
                <div className="playground-background"/>
                <PlaygroundGrid rows={rows} cols={cols}/>

                <div className="playground-blocks">{blocks}</div>
            </div>
        )
    }
}
