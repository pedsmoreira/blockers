import {action, observable} from "mobx";
import Store from "app/stores/Store";
import TimePlayer from "app/lib/TimePlayer";

import GameMap from "app/game/GameMap";
import Character from "app/game/Character";
import Piece from "app/game/Piece";
import Spell from "app/game/Spell";

import * as gameStates from "app/constants/gameStates";
import * as gameProperties from "app/constants/gameProperties";

import MoveEvent from "app/game/events/MoveEvent";
import SpellCastEvent from "app/game/events/SpellCastEvent";

import Batman from "app/game/characters/Batman";

class GameStore extends Store {
    @observable state: string;
    @observable map: GameMap;
    @observable character: Character = new Batman();

    timer: TimePlayer;

    @action newPiece(): void {
        this.map.handlePiece(Piece.random());
    }

    @action rotate(): void {
        this.map.rotatePiece();
    }

    @action move(x: string, y: number): void {
        let newPosition = this.map.pieceMovementPosition(x, y);

        let movementAvailable = this.map.matrix.gridAvailable(this.map.piece, newPosition);
        if (movementAvailable) return;

        let event = new MoveEvent(this.map.piecePosition, newPosition, false);
        if (!event.fireBefore()) return;

        this.map.movePiece(x, y);
        event.fire();
    }

    @action decay(): void {
        let event = new MoveEvent(this.map.piecePosition, this.map.pieceDecayPosition(), true);
        if (!event.fireBefore()) return;

        if (!this.map.decayPiece()) {
            if (this.map.matrix.outOfBounds(this.map.piecePosition)) {
                this.gameOver();
            } else {
                this.newPiece();
            }
        } else {
            event.fire();
        }
    }

    @action castSpell(spell: Spell): void {
        if (!spell.canCast()) return;

        let event = new SpellCastEvent(spell);
        if (!event.fireBefore()) return;

        spell.cast();
        event.fire();
    }

    @action levelUp(): void {
        this.character.level++;
        this.timer.accelerate(gameProperties.SPEED * gameProperties.SPEED_FACTOR);
    }

    @action start(): void {
        this.map = new GameMap(gameProperties.ROWS, gameProperties.COLS);

        this.newPiece();
        this.state = gameStates.PLAYING;

        this.timer = new TimePlayer(gameProperties.SPEED, () => this.decay());
        this.timer.play();
    }

    @action resume(): void {
        this.state = gameStates.PLAYING;
        this.timer.play();
    }

    @action pause(): void {
        this.timer.pause();
        this.state = gameStates.PAUSED;
    }

    @action gameOver(): void {
        this.state = gameStates.LOSS;
        this.timer.pause();
        alert('Game Over');
    }
}

export default new GameStore();
