// @flow

export default class GameEvent {
    static listeners: { [string]: Function[] } = {
        on: [],
        before: []
    };

    propagate: boolean = true;

    fireBefore(): boolean {
        return this.propagate = this._fire('before');
    }

    fire() {
        if (!this.propagate) this._fire('on');
    }

    _fire(type: string): boolean {
        return this.constructor.listeners[type].every((callback) => callback(this) !== false);
    }

    static on(callback: Function) {
        this._addListener('on', callback);
    }

    static before(callback: Function) {
        this._addListener('before', callback);
    }

    static _addListener(type: string, callback: Function) {
        this.listeners[type].push(callback);
    }
}
