// @flow

import Block from "app/models/Block";
import type {Position} from "app/models/Matrix";
import Matrix from "app/models/Matrix";
import {COLORS, SHAPES} from "app/constants/piece";

export default class Piece extends Matrix<Block> {
    shape: string;
    id: number;
    static _id = 1;

    constructor(shape: string, character: any = null) {
        const shapeMatrix = SHAPES[shape];

        super(Matrix.rows(shapeMatrix), Matrix.cols(shapeMatrix));
        this.shape = shape;

        const color = this.color();
        Matrix.eachValue(shapeMatrix, (_, position: Position) => this.set(position, new Block(this, color, character)));

        this.id = this.constructor._id++;
    }

    color(): any {
        return COLORS[this.shapeIndex()];
    }

    shapeIndex(): number {
        return Object.keys(SHAPES).indexOf(this.shape);
    }

    detachBlocks() {
        this.eachValue((block: Block) => block.detach());
    }

    static randomShape(): string {
        const index = Math.floor(Math.random() * Object.keys(SHAPES).length);
        return Object.keys(SHAPES)[index];
    }

    static random(character: any = null): this {
        return new this(this.randomShape(), character);
    }
}
